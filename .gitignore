# Ambiente Virtual
venv/
env/
ENV/

# Arquivos de Ambiente e Configuração
.env
.env.*
*.env
**/.env
**/.env.*
env/
.venv
.env.local
.env.development
.env.test
.env.production
.env.backup
.env.save
.env.old
.flaskenv
mitigation/.env.py
python.env

# Arquivos de verificação e configuração de banco de dados
check._db.py
check_db.py
*_check_db.py
db_check.py
db_config.py
database_check.py
database_config.py
db_credentials.py
db_settings.py
*_db_settings.py

# Alembic
alembic.ini
versions/
!alembic.ini.example
!versions/.gitkeep

# Arquivos Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Arquivos de Configuração Sensíveis
config.py
secrets.json
credentials.json
*.pem
*.key
*.crt
.secret
.secrets/
secret/
secrets/
private/
*.private
*_rsa
*_dsa
*_ed25519
*_ecdsa
.ssh/
auth.json
.htpasswd
.aws/
.credentials
api_keys.txt
oauth.json
token.*
*.token
.netrc

# Banco de Dados
*.db
*.sqlite
*.sqlite3
*.sql
data/
database/
*.csv
*.xls
*.xlsx
*.json
!package.json
*.yaml
*.yml
!docker-compose.yml
!.github/workflows/*.yml

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDEs e Editores
.idea/
.vscode/
*.swp
*.swo
*.swn
*.bak
*.sublime*
.project
.pydevproject
*.code-workspace

# Sistema Operacional
.DS_Store
Thumbs.db
desktop.ini
$RECYCLE.BIN/
*.lnk

# Arquivos de Cache
.cache/
.pytest_cache/
.coverage
htmlcov/

# Arquivos de Mídia e Uploads
uploads/
static/uploads/
*.gif
*.mov
*.wav
*.zip
*.tar.gz
*.rar

# Arquivos de Dependências
node_modules/
package-lock.json
yarn.lock
poetry.lock
Pipfile.lock

# Arquivos de Produção
*.prod.*
production.py
staging.py

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Outros arquivos sensíveis
*.bak
*.swp
*.swo
*~
.history
.env-*
.env_*
env.*
.envrc
.direnv
.env-cmdrc
.npmrc
.yarnrc
